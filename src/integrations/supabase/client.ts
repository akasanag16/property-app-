
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://smooniqpqenxdbkceppn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtb29uaXFwcWVueGRia2NlcHBuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyNjI0ODUsImV4cCI6MjA2MDgzODQ4NX0.MhwwE_baKbSuSM8yHUxgREWGwOxEHhW05RygLy3xHBw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Type extensions for the new database functions
type CustomFunctions = {
  get_properties_for_service_provider: (args: { provider_id: string }) => Promise<{
    data: Database['public']['Tables']['properties']['Row'][];
    error: any;
  }>;
}

export const supabase = createClient<Database, 'public', CustomFunctions>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    // Add proper abort controller and prevent recursion
    fetch: (url, options) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      return fetch(url, {
        ...options,
        signal: options?.signal || controller.signal,
        headers: {
          ...options?.headers,
          'X-Client-Info': 'lovable-app', // Custom header to help identify client
        }
      }).finally(() => clearTimeout(timeoutId));
    },
  },
});

// Create a storage bucket for property images if it doesn't exist
// We run this in a separate context to avoid RLS recursion issues
(async () => {
  try {
    // Check if the bucket exists first
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error listing storage buckets:', listError);
      return;
    }
    
    const propertyImagesBucketExists = buckets?.some(bucket => bucket.name === 'property_images');
    
    if (!propertyImagesBucketExists) {
      // Attempt to create the bucket if it doesn't exist
      const { error: createError } = await supabase.storage.createBucket('property_images', {
        public: true,
        fileSizeLimit: 10485760, // 10MB
        allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
      });
      
      if (createError) {
        console.error('Error creating storage bucket:', createError);
        // Don't throw error here, just log it to avoid blocking app initialization
      } else {
        console.log('Created property_images storage bucket');
      }
    }
  } catch (error) {
    console.error('Error checking/creating storage bucket:', error);
    // Don't throw error here, just log it to avoid blocking app initialization
  }
})();
